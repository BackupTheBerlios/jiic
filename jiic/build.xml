<?xml version="1.0" encoding="UTF-8"?>
<project name="jiic" default="build" basedir="." xmlns:jiic="de.tu_darmstadt.informatik.rbg.hatlak.iso9660">
	
	<!--
	<iso
	  destfile
		(File: Output file. Required.)
	  basedir
		(File: Base directory for files to be included. Required unless using at least one fileset.)
	  includes
		(String: Pattern of files to be included. If missing: all)
	  excludes
		(String: Pattern of files to be excluded. If missing: none)
	  name
		(String: Volume name)
	  system
		(String: Volume system identifier)
	  dataPreparer
		(String: Volume data preparer)
	  publisher
		(String: Volume publisher)
	  movedDirectoriesStoreName
	 	(String: Name of Moved Directories Store. Default: "rr_moved")
	  allowASCII
		(boolean: Allow ASCII character set for ISO 9660: Default: no)
	  forceDotDelimiter
		(boolean: Whether to add dot for files without extension. Default: yes)
	  restrictDirDepthTo8
		(boolean: Whether to relocate directories deeper than eight levels. Default: yes)
	  interchangeLevel
		(int: ISO 9660 Interchange Level controlling max filename length: 1=8+3, 2=31. Default: 1)
	  forcePortableFilenameCharacterSet
		(boolean: Whether to force [-A-Za-z0-9_]+ for Rock Ridge filenames. Default: yes)
	  mkisofsCompatibility
		(boolean: Whether to use RRIP version 1.09 like mkisofs does, else use v1.12. Default: yes)
	  enableJoliet
		(boolean: Enable Joliet support. Default: yes)
	  enableRockRidge
		(boolean: Enable Rock Ridge support. Default: yes)
	  hideMovedDirectoriesStore
		(boolean: Hide Moved Directories Store (Rock Ridge: e.g. ".rr_moved"). Default: yes)
	  verbose
		(boolean: Output all renaming actions. Default: no)
	  bootImage
		(File: Boot image, enables El Torito support)
	  bootImageSectorCount
		(int: Boot image sector count. Default: 1)
	  bootImageID
		(String: Boot image identifier)
	  bootImageLoadSegment
		(int: Boot image load segment. Default: 0x07C)
	  bootImageEmulation
		(String: Boot image emulation type. Default: None)
	  bootImagePlatformID
		(String: Boot image platform identifier)
	  genBootInfoTable
		(boolean: Generate Boot Info Table, cf. mkisofs -boot-info-table. Default: no)
	  padEnd
		(boolean: Pad ISO image to 150 logical sectors, cf. mkisofs -pad. Default: yes)
	  allowLongJolietNames
		(boolean: Allow up to 103 Unicode character for Joliet instead of 64, cf. mkisofs -joliet-long. Default: no)  
	/>

	<fileset
	  dir
		(File: Base directory for files to be included. Required.)
	  includes
		(String: Pattern of files to be included. If missing: all)
	  excludes
		(String: Pattern of files to be excluded. If missing: none)
	/>

	<isofileset
	  dir
		(File: Base directory for files to be included. Required.)
	  includes
		(String: Pattern of files to be included. If missing: all)
	  excludes
		(String: Pattern of files to be excluded. If missing: none)
	  prefix
		(String: ISO image path prefix for files to be included)
	  filemode
	    (String: 3 or 4 digit octal file mode. Only effective with rockridge extensions. Default is 644)
	  dirmode
	    (String: 3 or 4 digit octal directory mode. Only effective with rockridge extensions. Default is 755)
	/>
	-->
	
	
	<!--
	  ****************************************************
	  *  FOR BUILDING
	  ****************************************************
	-->
	
	<property name="src" location="." />
	<property name="bin" location="bin" />
	<property name="lib" location="lib" />

	<!-- What to build with -->
	<path id="sabre">
		<pathelement location="${lib}/sabre.jar" />
	</path>
	
	<target name="build" depends="compile,jar" description="Build the library" />

	<target name="compile">
		<mkdir dir="${bin}" />
		<javac srcdir="${src}" includes="de/**/*.java" destdir="${bin}" source="1.5" target="1.5" includeantruntime="true" classpathref="sabre" /> 
	</target>
	
	<target name="jar">
		<jar destfile="${lib}/iso9660.jar">
			<fileset dir="bin" />
			<manifest>
				<attribute name="Built-By" value="${user.name}"/>
				<attribute name="Class-Path" value="sabre.jar"/>
			</manifest>
		</jar>
	</target>
	
	
	<!--
	  ****************************************************
	  *  FOR TESTING
	  ****************************************************
	-->
	
	<target name="test" depends="taskdef,java.test,boot,longtest,minimal,eldream,empty,copyright,linux,linux-norr,linux-isoonly,paths,conflict,executable,roundtrip" description="Run the available tests" />	

	<!-- Properties for test dependencies -->
	<property name="kernelversion" value="2.6.20"/>
	<property name="tomsrtbt" value="tomsrtbt-2.0.103.ElTorito.288.img" />
	
	<!-- What to test with -->
	<path id="jiic">
		<pathelement location="${lib}/sabre.jar" />
		<pathelement location="${lib}/iso9660.jar" />
	</path>

	<!-- Check which tests we can run -->
	<available file="${tomsrtbt}" property="tomsrtbt.exists" type="file" />
	<available file="eldream/ED_1024.avi" property="eldream.exists" type="file"/>
	<available file="linux-${kernelversion}" property="linux.exists" type="dir" />
	
	<target name="taskdef" description="Load the built task">
		<taskdef uri="de.tu_darmstadt.informatik.rbg.hatlak.iso9660"
		         resource="de/tu_darmstadt/informatik/rbg/hatlak/iso9660/antlib.xml"
		         classpathref="jiic" />
	</target>

	<!-- Test class -->
	<target name="java.test">
		<condition property="eltorito.arg" value="" else="--disable-eltorito">
			<isset property="tomsrtbt.exists" />
		</condition>
		<javac srcdir="." includes="ISOtest.java" classpathref="jiic" includeantruntime="false" verbose="true" />
		<java classname="ISOtest" fork="true">
			<classpath>
				<pathelement location="." />
				<path refid="jiic" />
			</classpath>
			<arg value="test/ISOTest.iso" />
			<arg line="${eltorito.arg}" />
		</java>
	</target>
	
	<!-- Test creating a bootable iso -->
	<target name="boot" if="tomsrtbt.exists" depends="boot.skipped">
		<jiic:iso destfile="test/boot.iso" basedir="." name="Boot"
			excludes="**" copyrightFile="Copyright.txt"
			bootImage="${tomsrtbt}"
			bootImageSectorCount="1" bootImageEmulation="2.88"
			bootImagePlatformID="X86"
		/>
	</target>
	<target name="boot.skipped" unless="tomsrtbt.exists">
		<echo>boot test skipped</echo>
	</target>

	<target name="longtest">
		<delete dir="test/longtest" />
		<mkdir dir="test/longtest/ABCDEFGHIJKLMNOPQRSTUVWXYZ/ABCDEFGHIJKLMNOPQRSTUVWXYZ/ABCDEFGHIJKLMNOPQRSTUVWXYZ/ABCDEFGHIJKLMNOPQRSTUVWXYZ/ABCDEFGHIJKLMNOPQRSTUVWXYZ" />
		<echo file="test/longtest/ABCDEFGHIJKLMNOPQRSTUVWXYZ/ABCDEFGHIJKLMNOPQRSTUVWXYZ/ABCDEFGHIJKLMNOPQRSTUVWXYZ/ABCDEFGHIJKLMNOPQRSTUVWXYZ/ABCDEFGHIJKLMNOPQRSTUVWXYZ/ABCDEFGHIJKLMNOPQRSTUVWXYZ.ABCDEFG" message="Test data" />
		
		<jiic:iso destfile="test/longtest.iso" basedir="test/longtest" name="longtest"
			interchangeLevel="2" allowLongJolietNames="yes"
		/>
	</target>

	<target name="minimal">
		<mkdir dir="test/minimal" />
		<touch file="test/minimal/dummy" />
		<jiic:iso destfile="test/minimal.iso" basedir="test" name="Minimal"
			includes="minimal/dummy"
		/>
	</target>

	<!-- Test a completely empty ISO -->
	<target name="empty">
		<mkdir dir="test/empty" />
		<jiic:iso destfile="test/empty.iso" basedir="test/empty" />
	</target>
	
	<target name="copyright">
		<mkdir dir="test/copyright" />
		<jiic:iso destfile="test/copyright.iso" basedir="test/copyright" name="test" copyrightFile="Copyright.txt" />
	</target>
	
	<!-- Test an iso with elephants dream on it -->
	<target name="eldream" if="eldream.exists" depends="eldream.skipped">
		<jiic:iso destfile="test/eldream.iso" basedir="." name="Elephants Dream"
			includes="eldream/ED_1024.avi"
		/>
	</target>
	<target name="eldream.skipped" unless="eldream.exists">
		<echo>eldream test skipped</echo>
	</target>

	<!-- Tests based around the linux kernel -->
	<target name="linux-extract">
	    <untar compression="bzip2" src="linux-${kernelversion}.tar.bz2" dest=".">
		    <fileset dir="." includes="linux-${kernelversion}" />
		</untar>
	</target>
	<target name="linux" if="linux.exists" depends="linux.skipped">
		<jiic:iso destfile="linux.iso" basedir="linux-${kernelversion}" name="Linux"
			excludes="/linux-${kernelversion}"
		/>
	</target>
	<target name="linux-norr" if="linux.exists" depends="linux.skipped">
		<jiic:iso destfile="linux.iso" basedir="linux-${kernelversion}" name="Linux"
			excludes="/linux-${kernelversion}" enableRockRidge="no"
		/>
	</target>
	<target name="linux-isoonly" if="linux.exists" depends="linux.skipped">
		<jiic:iso destfile="linux.iso" basedir="linux-${kernelversion}" name="Linux"
			excludes="/linux-${kernelversion}" enableRockRidge="no" enableJoliet="no"
		/>
	</target>
	<target name="linux.skipped" unless="linux.exists">
		<echo>linux test skipped</echo>
	</target>

	<!-- Test an ISO with some troublesome paths -->
	<target name="paths">
		<delete dir="test/paths" />
		<mkdir dir="test/paths/iso/InfoCenter_for_Windows/ibm_help/eclipse/plugins/org.eclipse.help.webapp_3.5.0.v20100507/web-archive/help/WEB-INF" />
		<mkdir dir="test/paths/iso/InfoCenter_for_Windows/ibm_help/eclipse/plugins/org.eclipse.help.webapp_3.5.0.v20100507/web-archive/help/META-INF" />
		<jiic:iso destfile="test/paths.iso" basedir="test/paths/iso" name="Linux" />
	</target>
	
	<!-- Test an ISO where we move a dir which matches one in . by name -->
	<target name="conflict">
		<delete dir="test/conflict" />
		<mkdir dir="test/conflict/1/2/3/4/5/6/7/CONFLICT" />
		<mkdir dir="CONFLICT" />
		<jiic:iso destfile="test/conflict.iso" basedir="test/conflict" name="Linux" />
		<delete dir="CONFLICT" />
	</target>

	<!-- Check that executable.iso contains script.sh and it is marked as r-xrw-r-x, and that the dir is rwxr-xrwx -->
	<target name="executable">
		<delete dir="test/exe" />
		<mkdir dir="test/exe" />
		<mkdir dir="test/exe/directory" />
		
		<echo file="test/exe/script.sh">#!/bin/bash${line.separator}echo Success</echo>
		
		<jiic:iso destfile="test/executable.iso" name="Linux">
			<isofileset dir="test/exe" filemode="565" dirmode="757" />
		</jiic:iso>
	</target>
	
	<!-- Test files get packaged and comes back out ok -->
	<target name="roundtrip" depends="roundtrip.extractor,roundtrip.skipped" if="extractor.exists">
		<jiic:iso destfile="test/roundtrip.iso" name="ISO">
			<fileset dir="testsuite" defaultexcludes="false" />
		</jiic:iso>
		
		<delete dir="test/roundtrip" />
		<mkdir dir="test/roundtrip" />
		<exec executable="file-roller">
			<arg value="--extract-to=test/roundtrip" />
			<arg value="test/roundtrip.iso" />
		</exec>
		
		<exec executable="diff" failonerror="true">
			<arg value="testsuite" />
			<arg value="test/roundtrip" />
		</exec>
	</target>
	<target name="roundtrip.extractor">
		<property environment="env" />
		<condition property="extractor.exists">
			<available file="file-roller" filepath="${env.PATH}" />
		</condition>
	</target>
	<target name="roundtrip.skipped" unless="extractor.exists">
		<echo>extractor test skipped</echo>
	</target>
	
</project>